
%%%%%%%%%    LightFFDNet v2  Dataset1


%clear
 imds = imageDatastore("C:\Users\Gunel\Downloads\Fake_real","IncludeSubfolders",true,"LabelSource","foldernames");
 imds.ReadFcn = @(loc)imresize(imread(loc),[224,224]);     %Resize images to specific dimensions

 [imdsTrain, imdsValidation, imdsTest] = splitEachLabel(imds, 0.1, 0.2) %10-Validation, 20-Test, 70-Train

% Designing a CNN model

layers = [
    imageInputLayer([224 224 3])

    convolution2dLayer(3,32,'Padding','same')
    batchNormalizationLayer
    reluLayer

    maxPooling2dLayer(2,'Stride',2)

    convolution2dLayer(3,64,'Padding','same')
    batchNormalizationLayer
    reluLayer

    maxPooling2dLayer(2,'Stride',2)

    convolution2dLayer(3,128,'Padding','same')
    batchNormalizationLayer
    reluLayer
    
    maxPooling2dLayer(2,'Stride',2)
    
    convolution2dLayer(3,256,'Padding','same')
    batchNormalizationLayer
    reluLayer
 
    maxPooling2dLayer(2,'Stride',2)
     
    convolution2dLayer(3,512,'Padding','same')
    batchNormalizationLayer
    reluLayer

    fullyConnectedLayer(2)
    softmaxLayer
    classificationLayer];

options = trainingOptions("adam",...
    "ExecutionEnvironment","auto",...
    "InitialLearnRate",0.0001,...
    "MaxEpochs",10,...
    "MiniBatchSize",16,...
    "Shuffle","every-epoch",...
    "ValidationFrequency",3,...
    "Plots","training-progress",...
    "ValidationData",imdsValidation);

net = trainNetwork(imdsTrain,layers,options);


%% Test the Model
    
    [YPred,~] = classify(net,imdsTest);
    
    YTest = imdsTest.Labels;
    accuracy = mean(YPred == YTest);
    disp('  ');
    disp('  ');
    disp('Test accuracy: ');
    disp(['accuracy = ' num2str(accuracy)]);
    disp('  ');

    
   
