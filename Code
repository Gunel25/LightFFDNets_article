%%%%%% MobileNetV2 DataSet2


%net = googlenet;
%net = vgg19;
%net = alexnet;
%net = resnet50;
net = mobilenetv2;
%net = squeezenet;+
%net = inceptionv3;
%net = resnet18;
%net = resnet101;
%net = inceptionresnetv2;
%net = vgg16;
%net = darknet53;


imdsTrain = imageDatastore("C:\Users\Gunel\Downloads\Dataset140k__\Train","IncludeSubfolders",true,"LabelSource","foldernames");
imdsValidation = imageDatastore("C:\Users\Gunel\Downloads\Dataset140k__\Validation","IncludeSubfolders",true,"LabelSource","foldernames");
imdsTest = imageDatastore("C:\Users\Gunel\Downloads\Dataset140k__\Test","IncludeSubfolders",true,"LabelSource","foldernames");

% imagecount = numel(imdsTest.Files);
% disp(['datasetdeki resim say覺s覺:' num2str(imagecount)]);
%inputSize = [224 224 3];
%[imdsTrain, imdsValidation] = splitEachLabel(imdsTrain, 0.7);

% Resize the images to match the network input layer.
%augimdsTrain = augmentedImageDatastore([224 224 3],imdsTrain);
%augimdsValidation = augmentedImageDatastore([224 224 3],imdsValidation);


numClasses = numel(categories(imdsTrain.Labels));
inputSize = net.Layers(1).InputSize;
layrsSize = length(net.Layers);
numClasses_net = net.Layers(end).OutputSize;

lgraph = layerGraph(net);
%deepNetworkDesigner(net);


newLearnableLayer = fullyConnectedLayer(numClasses, ...
    'Name','new_fc', ...
    'WeightLearnRateFactor',10, ...
    'BiasLearnRateFactor',10);   
%lgraph = replaceLayer(lgraph,'loss3-classifier',newLearnableLayer); %googlenet
%lgraph = replaceLayer(lgraph,'fc8',newLearnableLayer);  %vgg19, alexnet
%lgraph = replaceLayer(lgraph,'fc1000',newLearnableLayer); %resnet50, %resnet101
lgraph = replaceLayer(lgraph,'Logits',newLearnableLayer); %mobileNetv2
%lgraph = replaceLayer(lgraph,'conv53',newLearnableLayer); %darknet53

newClassLayer = classificationLayer('Name','new_classoutput');
%lgraph = replaceLayer(lgraph,'output',newClassLayer);
%lgraph = replaceLayer(lgraph,'ClassificationLayer_fc1000',newClassLayer);  %resnet50
lgraph = replaceLayer(lgraph,'ClassificationLayer_Logits',newClassLayer); %mobileNetv2
%lgraph = replaceLayer(lgraph,'ClassificationLayer_predictions',newClassLayer);  %resnet101



%Resize the images to match the network input layer
augimdsTrain = augmentedImageDatastore(inputSize(1:3),imdsTrain);

augimdsValidation = augmentedImageDatastore(inputSize(1:3),imdsValidation);

augimdsTest = augmentedImageDatastore(inputSize(1:3),imdsTest);

opts = trainingOptions("adam",...
    "ExecutionEnvironment","auto",...
    "InitialLearnRate",0.0001,...
    "MaxEpochs",10,...
    "MiniBatchSize",16,...
    "Shuffle","every-epoch",...
    "ValidationFrequency",3,...
    "Plots","training-progress",...
    "ValidationData",augimdsValidation);


tic
netTransfer = trainNetwork(augimdsTrain,lgraph, opts);
toc

%% Test the Model

[YPred,~] = classify(netTransfer,augimdsTest);

YTest = imdsTest.Labels;
accuracy = mean(YPred == YTest);
disp('  ');
disp('  ');
disp('Test accuracy: ');
disp(['accuracy =  ' num2str(accuracy)]);
disp('  ');

    
    %%Test the img
%     I = imread("real_1.jpg");
% I = imresize(I,inputSize(1:3));
% 
% YPred = classify(netTransfer,I);
% imshow(I)
% title("Predicted class: " + string(YPred));











%%%%%% Alexnet DataSet1


% clc
% clear
%net = googlenet;
%net = vgg19;
net = alexnet;
%net = resnet50;
%net = mobilenetv2;
%net = squeezenet;+
%net = inceptionv3;
%net = resnet18;
%net = resnet101;
%net = inceptionresnetv2;
%net = vgg16;
%net = darknet53;


imds = imageDatastore("C:\Users\Gunel\Downloads\Fake_real","IncludeSubfolders",true,"LabelSource","foldernames");
[imdsValidation, imdsTest, imdsTrain] = splitEachLabel(imds, 0.1, 0.2)

imagecount = numel(imdsTest.Files);
disp(['datasetdeki resim say覺s覺:' num2str(imagecount)]);
%inputSize = [224 224 3];
%[imdsTrain, imdsValidation] = splitEachLabel(imdsTrain, 0.7);

% Resize the images to match the network input layer.
%augimdsTrain = augmentedImageDatastore([224 224 3],imdsTrain);
%augimdsValidation = augmentedImageDatastore([224 224 3],imdsValidation);


numClasses = numel(categories(imdsTrain.Labels));
inputSize = net.Layers(1).InputSize;
layrsSize = length(net.Layers);
numClasses_net = net.Layers(end).OutputSize;

lgraph = layerGraph(net);
%deepNetworkDesigner(net);


newLearnableLayer = fullyConnectedLayer(numClasses, ...
    'Name','new_fc', ...
    'WeightLearnRateFactor',10, ...
    'BiasLearnRateFactor',10);   
%lgraph = replaceLayer(lgraph,'loss3-classifier',newLearnableLayer); %googlenet
lgraph = replaceLayer(lgraph,'fc8',newLearnableLayer);  %vgg19, alexnet
%lgraph = replaceLayer(lgraph,'fc1000',newLearnableLayer); %resnet50, %resnet101
%lgraph = replaceLayer(lgraph,'Logits',newLearnableLayer); %mobileNetv2
%lgraph = replaceLayer(lgraph,'conv53',newLearnableLayer); %darknet53

newClassLayer = classificationLayer('Name','new_classoutput');
lgraph = replaceLayer(lgraph,'output',newClassLayer);
%lgraph = replaceLayer(lgraph,'ClassificationLayer_fc1000',newClassLayer);  %resnet50
%lgraph = replaceLayer(lgraph,'ClassificationLayer_Logits',newClassLayer); %mobileNetv2
%lgraph = replaceLayer(lgraph,'ClassificationLayer_predictions',newClassLayer);  %resnet101



%Resize the images to match the network input layer
augimdsTrain = augmentedImageDatastore(inputSize(1:3),imdsTrain);

augimdsValidation = augmentedImageDatastore(inputSize(1:3),imdsValidation);

augimdsTest = augmentedImageDatastore(inputSize(1:3),imdsTest);

opts = trainingOptions("adam",...
    "ExecutionEnvironment","auto",...
    "InitialLearnRate",0.0001,...
    "MaxEpochs",10,...
    "MiniBatchSize",16,...
    "Shuffle","every-epoch",...
    "ValidationFrequency",3,...
    "Plots","training-progress",...
    "ValidationData",augimdsValidation);


tic
[netTransfer, info] = trainNetwork(augimdsTrain,lgraph, opts);
toc

%% Test the Model

[YPred,~] = classify(netTransfer,augimdsTest);

YTest = imdsTest.Labels;
accuracy = mean(YPred == YTest);
disp('  ');
disp('  ');
disp('Test accuracy: ');
disp(['accuracy =  ' num2str(accuracy)]);
disp('  ');

    
    %%Test the img
%  I = imread("real_1.jpg");
%  figure
% imshow(I)
% size(I)
%  I = imresize(I,inputSize(1:2));
% 
%  [label,scores] = classify(net,I);
% label
% % 
% YPred = classify(netTransfer,I);
% imshow(I)
% title("Predicted class: " + string(YPred));


%classNames = net.Layers(end).ClassNames;        figure      imshow(I)      title(string(label) + ", " + num2str(100*scores(classNames == label),3) + "%"); 
